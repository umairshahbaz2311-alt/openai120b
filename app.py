"""
OpenAI 120B Advanced - Interface avec capacit√©s de d√©veloppement compl√®tes
Version avec g√©n√©ration et ex√©cution de code en temps r√©el
"""

import os
import streamlit as st
from openai import OpenAI
from dotenv import load_dotenv
import time
import json
import datetime
from pathlib import Path
import subprocess
import tempfile
import sys
import io
import contextlib
import traceback
import zipfile
import base64
import re

# Configuration de la page
st.set_page_config(
    page_title="OpenAI 120B Advanced",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Charger les variables d'environnement
load_dotenv()

# CSS am√©lior√© avec support pour l'ex√©cution de code
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: 700;
        background: linear-gradient(90deg, #1f4037, #99f2c8);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        margin-bottom: 1rem;
    }
    .project-info {
        text-align: center;
        color: #666;
        margin-bottom: 2rem;
    }
    .feature-badge {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: bold;
        margin: 0.2rem;
        display: inline-block;
    }
    .code-execution-area {
        background: #f8f9fa;
        border: 2px solid #e9ecef;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .success-box {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
        color: #155724;
    }
    .error-box {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
        color: #721c24;
    }
    .file-tree {
        background: #2d3748;
        color: #e2e8f0;
        padding: 1rem;
        border-radius: 8px;
        font-family: 'Courier New', monospace;
        font-size: 0.9rem;
        margin: 1rem 0;
    }
    .download-button {
        background: linear-gradient(45deg, #4CAF50, #45a049);
        color: white;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 25px;
        cursor: pointer;
        font-weight: bold;
        text-decoration: none;
        display: inline-block;
        margin: 0.5rem;
        transition: all 0.3s;
    }
    .download-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    /* Mobile optimizations */
    @media (max-width: 768px) {
        .main-header {
            font-size: 2rem;
        }
        .feature-badge {
            font-size: 0.7rem;
            padding: 0.3rem 0.8rem;
        }
        .main .block-container {
            padding: 1rem 0.5rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# Fonctions utilitaires avanc√©es
CONVERSATIONS_DIR = Path("conversations")
PROJECTS_DIR = Path("generated_projects")
CONVERSATIONS_DIR.mkdir(exist_ok=True)
PROJECTS_DIR.mkdir(exist_ok=True)
CREDITS_FILE = Path("credits_usage.json")

def load_credits_usage():
    if CREDITS_FILE.exists():
        try:
            with open(CREDITS_FILE, 'r') as f:
                return json.load(f)
        except:
            pass
    return {"total_tokens": 0, "total_requests": 0, "sessions": [], "projects_created": 0}

def save_credits_usage(credits_data):
    try:
        with open(CREDITS_FILE, 'w') as f:
            json.dump(credits_data, f, indent=2)
    except Exception as e:
        st.warning(f"Impossible de sauvegarder les stats: {e}")

def estimate_tokens(text):
    return int(len(text.split()) * 1.3)

def execute_python_code(code):
    """Ex√©cute du code Python en toute s√©curit√©"""
    try:
        # Nettoyer le code
        code = code.strip()
        if not code:
            return {"success": False, "output": "", "error": "Code vide"}
        
        # Capturer stdout et stderr
        old_stdout = sys.stdout
        old_stderr = sys.stderr
        
        captured_output = io.StringIO()
        captured_error = io.StringIO()
        
        sys.stdout = captured_output
        sys.stderr = captured_error
        
        # Cr√©er un namespace s√©curis√© avec plus de modules
        safe_globals = {
            '__builtins__': {
                'print': print,
                'len': len,
                'range': range,
                'list': list,
                'dict': dict,
                'str': str,
                'int': int,
                'float': float,
                'bool': bool,
                'sum': sum,
                'max': max,
                'min': min,
                'sorted': sorted,
                'enumerate': enumerate,
                'zip': zip,
                'map': map,
                'filter': filter,
                'abs': abs,
                'round': round,
                'type': type,
                'isinstance': isinstance,
            }
        }
        
        # Ajouter des modules utiles
        try:
            safe_globals['math'] = __import__('math')
            safe_globals['datetime'] = __import__('datetime')
            safe_globals['json'] = __import__('json')
            safe_globals['random'] = __import__('random')
            safe_globals['time'] = __import__('time')
            safe_globals['re'] = __import__('re')
        except:
            pass
        
        # Essayer d'importer des modules de data science
        try:
            import matplotlib
            matplotlib.use('Agg')  # Backend non-interactif
            import matplotlib.pyplot as plt
            safe_globals['plt'] = plt
            safe_globals['matplotlib'] = matplotlib
        except:
            pass
            
        try:
            import numpy as np
            safe_globals['np'] = np
            safe_globals['numpy'] = np
        except:
            pass
            
        try:
            import pandas as pd
            safe_globals['pd'] = pd
            safe_globals['pandas'] = pd
        except:
            pass
        
        # Ex√©cuter le code
        exec(code, safe_globals)
        
        # Restaurer stdout et stderr
        sys.stdout = old_stdout
        sys.stderr = old_stderr
        
        output = captured_output.getvalue()
        error = captured_error.getvalue()
        
        return {
            'success': True,
            'output': output,
            'error': error if error else None
        }
        
    except Exception as e:
        sys.stdout = old_stdout
        sys.stderr = old_stderr
        return {
            'success': False,
            'output': '',
            'error': str(e) + '\n' + traceback.format_exc()
        }

def extract_code_blocks(text, language="python"):
    """Extrait les blocs de code d'un texte"""
    pattern = f"```{language}\\s*\\n(.*?)\\n```"
    matches = re.findall(pattern, text, re.DOTALL)
    return matches

def extract_json_from_text(text):
    """Extrait le JSON d'un texte"""
    try:
        # Chercher les blocs JSON
        json_pattern = r"```json\s*\n(.*?)\n```"
        matches = re.findall(json_pattern, text, re.DOTALL)
        
        for match in matches:
            try:
                return json.loads(match.strip())
            except:
                continue
        
        # Si pas de bloc ```json, chercher du JSON brut
        json_pattern = r'\{[^{}]*"files"[^{}]*\}'
        matches = re.findall(json_pattern, text, re.DOTALL)
        
        for match in matches:
            try:
                return json.loads(match)
            except:
                continue
                
        return None
    except:
        return None

def create_project_structure(project_data):
    """Cr√©e la structure d'un projet complet"""
    try:
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        project_name = project_data.get('name', 'project').replace(' ', '_').lower()
        project_name = re.sub(r'[^a-z0-9_]', '', project_name)
        project_path = PROJECTS_DIR / f"{project_name}_{timestamp}"
        project_path.mkdir(parents=True, exist_ok=True)
        
        created_files = []
        
        for file_info in project_data.get('files', []):
            if isinstance(file_info, dict) and 'name' in file_info and 'content' in file_info:
                file_path = project_path / file_info['name']
                
                # Cr√©er les dossiers n√©cessaires
                file_path.parent.mkdir(parents=True, exist_ok=True)
                
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(file_info['content'])
                
                created_files.append(str(file_path.relative_to(PROJECTS_DIR)))
        
        return project_path, created_files
    except Exception as e:
        st.error(f"Erreur cr√©ation projet: {e}")
        return None, []

def create_download_zip(project_path):
    """Cr√©e un zip t√©l√©chargeable du projet"""
    try:
        zip_path = project_path.with_suffix('.zip')
        
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for file_path in project_path.rglob('*'):
                if file_path.is_file():
                    arcname = file_path.relative_to(project_path)
                    zipf.write(file_path, arcname)
        
        return zip_path
    except Exception as e:
        st.error(f"Erreur cr√©ation ZIP: {e}")
        return None

def create_advanced_prompt(user_message, mode="standard"):
    """Cr√©e un prompt avanc√© pour diff√©rents types de t√¢ches"""
    
    if mode == "code_generation":
        system_prompt = """Tu es un d√©veloppeur expert capable de cr√©er des applications compl√®tes et fonctionnelles.

CAPACIT√âS:
üîß Applications web (HTML/CSS/JS, React, Vue)
üì± Applications mobiles (concepts React Native, Flutter)
üíª Applications desktop (Electron, Python tkinter)
üåê APIs et backends (Python Flask/FastAPI, Node.js)
üìä Outils d'analyse (Python data science)
üéÆ Jeux web (JavaScript, Canvas)

FORMAT DE R√âPONSE pour projets:
```json
{
  "name": "nom_du_projet",
  "description": "Description compl√®te",
  "type": "web/mobile/desktop/api/tool",
  "files": [
    {
      "name": "index.html",
      "content": "<!DOCTYPE html>...",
      "description": "Page principale"
    },
    {
      "name": "style.css", 
      "content": "body { margin: 0; }...",
      "description": "Styles CSS"
    }
  ],
  "installation": "Instructions d√©taill√©es",
  "usage": "Comment utiliser l'application"
}
```

R√àGLES:
- Toujours fournir du code complet et fonctionnel
- Inclure tous les fichiers n√©cessaires
- Ajouter des commentaires explicatifs
- Design moderne et responsive
- Optimis√© pour mobile et desktop

Cr√©e cette application:"""

    elif mode == "code_execution":
        system_prompt = """Tu es un expert Python capable d'√©crire et d'ex√©cuter du code pour r√©soudre des probl√®mes.

CAPACIT√âS:
‚ö° Calculs et algorithmes
üìä Visualisations (matplotlib, plotly si disponible)  
üìà Analyse de donn√©es (pandas, numpy si disponible)
üßÆ Math√©matiques et statistiques
üîç Traitement de texte et regex
üé≤ Simulations et mod√©lisation

R√àGLES:
- √âcris du code Python complet et ex√©cutable
- Utilise print() pour afficher les r√©sultats
- Ajoute des commentaires explicatifs
- G√®re les erreurs potentielles
- Optimise pour la lisibilit√©

R√©sous ce probl√®me avec du code Python:"""

    else:  # mode standard
        system_prompt = """Tu es un assistant IA tr√®s avanc√© avec des capacit√©s compl√®tes de d√©veloppement.

üéØ CAPACIT√âS PRINCIPALES:
üîß D√©veloppement (web, mobile, desktop, APIs)
‚ö° Ex√©cution et test de code Python
üí° R√©solution de probl√®mes complexes
üìä Analyse de donn√©es et visualisations
üé® Design et interfaces utilisateur
üìù R√©daction et cr√©ation de contenu
üöÄ Innovation et brainstorming

STYLE DE R√âPONSE:
- R√©ponses d√©taill√©es et compl√®tes
- Explications techniques claires
- Exemples pratiques
- Solutions imm√©diatement utilisables
- Adapt√©es au niveau de l'utilisateur

R√©ponds de mani√®re compl√®te et d√©taill√©e:"""

    return [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_message}
    ]

# V√©rification du token
if not os.environ.get("HF_TOKEN"):
    st.error("‚ùå Token HF_TOKEN non configur√©. Cr√©ez un fichier .env avec votre token Hugging Face")
    st.info("Format du fichier .env:\n```\nHF_TOKEN=votre_token_ici\n```")
    st.stop()

# Initialisation du client
@st.cache_resource
def init_client():
    return OpenAI(
        base_url="https://router.huggingface.co/v1",
        api_key=os.environ["HF_TOKEN"],
    )

try:
    client = init_client()
    st.success("‚úÖ Syst√®me avanc√© initialis√© avec succ√®s", icon="üöÄ")
except Exception as e:
    st.error(f"‚ùå Erreur d'initialisation: {e}")
    st.stop()

# Charger les donn√©es
credits_data = load_credits_usage()

# En-t√™te avanc√©
st.markdown('<h1 class="main-header">üß† OpenAI 120B Advanced</h1>', unsafe_allow_html=True)
st.markdown('<p class="project-info">Assistant IA avec capacit√©s de d√©veloppement compl√®tes</p>', unsafe_allow_html=True)

# Badges de fonctionnalit√©s
st.markdown("""
<div style="text-align: center; margin-bottom: 2rem;">
    <span class="feature-badge">üî• G√©n√©ration de Code</span>
    <span class="feature-badge">‚ö° Ex√©cution Python</span>
    <span class="feature-badge">üì± Apps Mobile</span>
    <span class="feature-badge">üåê Apps Web</span>
    <span class="feature-badge">üíª Apps Desktop</span>
    <span class="feature-badge">üìä Visualisations</span>
    <span class="feature-badge">üé® Interface Design</span>
    <span class="feature-badge">üöÄ Projets Complets</span>
</div>
""", unsafe_allow_html=True)

# Initialisation des variables
if "messages" not in st.session_state:
    st.session_state.messages = []
    st.session_state.session_tokens = 0
    st.session_state.session_requests = 0
    st.session_state.projects_created = 0
    st.session_state.code_executions = 0

# Sidebar avanc√©e
with st.sidebar:
    st.header("üéõÔ∏è Centre de Contr√¥le Advanced")
    
    # Mode de fonctionnement
    st.subheader("üöÄ Mode de Travail")
    work_mode = st.selectbox(
        "Choisissez le mode:",
        ["üí¨ Chat Standard", "üîß G√©n√©ration de Code", "‚ö° Ex√©cution Python", "üé® Cr√©ation d'Apps"],
        help="S√©lectionnez le mode adapt√© √† votre t√¢che"
    )
    
    # Statistiques avanc√©es
    st.subheader("üìä Statistiques")
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric("üéØ Tokens Session", f"{st.session_state.session_tokens:,}")
        st.metric("üìä Requ√™tes", st.session_state.session_requests)
        if st.session_state.projects_created > 0:
            st.metric("üöÄ Projets", st.session_state.projects_created)
    
    with col2:
        st.metric("üèÜ Total Tokens", f"{credits_data['total_tokens']:,}")
        st.metric("üí∞ Co√ªt Session", f"${st.session_state.session_tokens * 0.00075:.4f}")
        if st.session_state.code_executions > 0:
            st.metric("‚ö° Codes Exec", st.session_state.code_executions)
    
    # Param√®tres IA
    st.subheader("ü§ñ Param√®tres IA")
    temperature = st.slider("üå°Ô∏è Cr√©ativit√©", 0.1, 2.0, 0.8, 0.1, help="Plus √©lev√© = plus cr√©atif")
    max_tokens = st.slider("üìù Longueur Max", 1000, 4000, 2500, 250, help="Tokens maximum par r√©ponse")
    
    # Options avanc√©es
    st.subheader("üî¨ Options Avanc√©es")
    auto_execute = st.checkbox("‚ö° Auto-exec Python", value=False, help="Ex√©cuter automatiquement le code Python g√©n√©r√©")
    create_projects = st.checkbox("üìÅ Auto-create Projects", value=True, help="Cr√©er automatiquement les structures de projet")
    show_metrics = st.checkbox("üìä Afficher M√©triques", value=True, help="Afficher les m√©triques d√©taill√©es")
    
    st.markdown("---")
    
    # Actions rapides
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üóëÔ∏è Reset", type="secondary", use_container_width=True):
            # Sauvegarder les stats avant reset
            if st.session_state.session_tokens > 0:
                credits_data['sessions'].append({
                    "timestamp": datetime.datetime.now().isoformat(),
                    "tokens": st.session_state.session_tokens,
                    "requests": st.session_state.session_requests,
                    "projects": st.session_state.projects_created,
                    "executions": st.session_state.code_executions
                })
                save_credits_usage(credits_data)
            
            st.session_state.messages = []
            st.session_state.session_tokens = 0
            st.session_state.session_requests = 0
            st.session_state.projects_created = 0
            st.session_state.code_executions = 0
            st.rerun()
    
    with col2:
        if st.button("üìä Stats", use_container_width=True):
            st.session_state.show_detailed_stats = not st.session_state.get('show_detailed_stats', False)
    
    # Stats d√©taill√©es
    if st.session_state.get('show_detailed_stats', False):
        st.subheader("üìà Stats D√©taill√©es")
        if credits_data.get('sessions'):
            recent_sessions = credits_data['sessions'][-5:]
            for i, session in enumerate(reversed(recent_sessions)):
                st.text(f"Session {len(recent_sessions)-i}: {session.get('tokens', 0):,} tokens")
    
    # Projets cr√©√©s
    if PROJECTS_DIR.exists():
        projects = [p for p in PROJECTS_DIR.iterdir() if p.is_dir()]
        if projects:
            st.subheader("üìÇ Projets R√©cents")
            for project in sorted(projects, key=lambda x: x.stat().st_mtime, reverse=True)[:3]:
                project_name = project.name[:20] + "..." if len(project.name) > 23 else project.name
                st.text(f"üìÅ {project_name}")
                
                if st.button(f"üì• ZIP", key=f"dl_{project.name}", help="T√©l√©charger le projet"):
                    zip_path = create_download_zip(project)
                    if zip_path and zip_path.exists():
                        with open(zip_path, 'rb') as f:
                            st.download_button(
                                "üíæ T√©l√©charger",
                                f.read(),
                                file_name=f"{project.name}.zip",
                                mime="application/zip",
                                key=f"download_{project.name}"
                            )

# Zone principale
st.markdown("### üí¨ Assistant IA Advanced")

# Afficher les messages
for i, message in enumerate(st.session_state.messages):
    with st.chat_message(message["role"]):
        st.markdown(message["content"])
        
        # Afficher les r√©sultats d'ex√©cution
        if "execution_result" in message:
            result = message["execution_result"]
            
            with st.expander("‚ö° R√©sultat d'Ex√©cution", expanded=True):
                if result["success"]:
                    if result["output"]:
                        st.success("‚úÖ Ex√©cution r√©ussie")
                        st.code(result["output"], language="text")
                    if result.get("error"):
                        st.warning(f"‚ö†Ô∏è Warnings: {result['error']}")
                else:
                    st.error("‚ùå Erreur d'ex√©cution")
                    st.code(result["error"], language="text")
        
        # Afficher les projets cr√©√©s
        if "project_created" in message:
            project_info = message["project_created"]
            
            with st.expander("üöÄ Projet Cr√©√©", expanded=True):
                st.success(f"‚úÖ **{project_info['name']}** cr√©√© avec succ√®s!")
                st.markdown(f"**Description:** {project_info['description']}")
                
                if project_info['files']:
                    st.markdown("**üìÅ Fichiers cr√©√©s:**")
                    for file_path in project_info['files']:
                        st.text(f"üìÑ {file_path}")

# Input utilisateur avec placeholders adaptatifs
placeholder_map = {
    "üîß G√©n√©ration de Code": "D√©crivez l'application √† cr√©er (ex: 'Cr√©e une calculatrice web moderne')",
    "‚ö° Ex√©cution Python": "D√©crivez le code √† ex√©cuter (ex: 'Cr√©e un graphique des ventes')",
    "üé® Cr√©ation d'Apps": "D√©crivez votre id√©e d'app (ex: 'App de gestion de t√¢ches')",
    "üí¨ Chat Standard": "Posez votre question ou d√©crivez ce que vous voulez..."
}

if prompt := st.chat_input(placeholder_map.get(work_mode, "Votre message...")):
    # Ajouter le message utilisateur
    st.session_state.messages.append({"role": "user", "content": prompt})
    
    with st.chat_message("user"):
        st.markdown(prompt)
    
    # G√©n√©rer la r√©ponse selon le mode
    with st.chat_message("assistant"):
        message_placeholder = st.empty()
        
        try:
            with st.spinner(f"üß† {work_mode.split()[-1]} en cours..."):
                start_time = time.time()
                
                # Choisir le type de prompt selon le mode
                mode_map = {
                    "üîß G√©n√©ration de Code": "code_generation",
                    "‚ö° Ex√©cution Python": "code_execution",
                    "üé® Cr√©ation d'Apps": "code_generation",
                    "üí¨ Chat Standard": "standard"
                }
                
                api_messages = create_advanced_prompt(prompt, mode_map.get(work_mode, "standard"))
                
                # Ajouter l'historique r√©cent (limit√© pour √©viter les tokens excess)
                if len(st.session_state.messages) > 1:
                    recent_history = st.session_state.messages[-4:]  # 4 derniers messages
                    for msg in recent_history[:-1]:  # Exclure le message actuel
                        if len(msg["content"]) < 2000:  # Limiter la taille
                            api_messages.append({
                                "role": msg["role"], 
                                "content": msg["content"][:1500] + "..." if len(msg["content"]) > 1500 else msg["content"]
                            })
                
                completion = client.chat.completions.create(
                    model="openai/gpt-oss-120b:together",
                    messages=api_messages,
                    max_tokens=max_tokens,
                    temperature=temperature,
                )
                
                response = completion.choices[0].message.content
                response_time = round(time.time() - start_time, 2)
                
                # Afficher la r√©ponse
                message_placeholder.markdown(response)
                
                # Pr√©parer les donn√©es du message
                message_data = {"role": "assistant", "content": response}
                
                # Post-traitement selon le mode
                
                # 1. Ex√©cution automatique de code Python
                if (work_mode == "‚ö° Ex√©cution Python" or auto_execute) and "```python" in response:
                    st.markdown("---")
                    st.markdown("### ‚ö° Ex√©cution du Code")
                    
                    code_blocks = extract_code_blocks(response, "python")
                    
                    if code_blocks:
                        for i, code in enumerate(code_blocks):
                            with st.expander(f"üî• Code {i+1}", expanded=True):
                                st.code(code, language="python")
                                
                                result = execute_python_code(code)
                                message_data["execution_result"] = result
                                
                                if result["success"]:
                                    if result["output"]:
                                        st.success("‚úÖ Ex√©cution r√©ussie")
                                        st.code(result["output"], language="text")
                                    if result.get("error"):
                                        st.warning(f"‚ö†Ô∏è Warnings: {result['error']}")
                                else:
                                    st.error("‚ùå Erreur d'ex√©cution")
                                    st.code(result["error"], language="text")
                        
                        st.session_state.code_executions += 1
                
                # 2. Cr√©ation automatique de projets
                if create_projects and work_mode in ["üîß G√©n√©ration de Code", "üé® Cr√©ation d'Apps"]:
                    project_data = extract_json_from_text(response)
                    
                    if project_data and "files" in project_data:
                        st.markdown("---")
                        st.markdown("### üöÄ Cr√©ation du Projet")
                        
                        project_path, created_files = create_project_structure(project_data)
                        
                        if project_path and created_files:
                            message_data["project_created"] = {
                                "name": project_data.get("name", "Projet"),
                                "description": project_data.get("description", ""),
                                "files": created_files,
                                "path": str(project_path.relative_to(PROJECTS_DIR))
                            }
                            
                            st.success(f"‚úÖ Projet **{project_data.get('name')}** cr√©√©!")
                            
                            # Afficher la structure
                            col1, col2 = st.columns(2)
                            with col1:
                                st.markdown("**üìÅ Fichiers cr√©√©s:**")
                                for file_path in created_files:
                                    st.text(f"üìÑ {file_path}")
                            
                            with col2:
                                # Cr√©er et proposer le t√©l√©chargement
                                zip_path = create_download_zip(project_path)
                                if zip_path and zip_path.exists():
                                    with open(zip_path, 'rb') as f:
                                        st.download_button(
                                            "üì• T√©l√©charger Projet",
                                            f.read(),
                                            file_name=f"{project_data.get('name', 'project')}.zip",
                                            mime="application/zip"
                                        )
                            
                            st.session_state.projects_created += 1
                            credits_data['projects_created'] = credits_data.get('projects_created', 0) + 1
                
                # Afficher les m√©triques
                if show_metrics:
                    st.markdown("---")
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.caption(f"‚è±Ô∏è {response_time}s")
                    with col2:
                        output_tokens = estimate_tokens(response)
                        st.caption(f"üìù {output_tokens} tokens")
                    with col3:
                        input_tokens = sum(estimate_tokens(m["content"]) for m in api_messages)
                        total_tokens = input_tokens + output_tokens
                        st.caption(f"üí∞ ${total_tokens * 0.00075:.4f}")
                    with col4:
                        st.caption(f"üéØ {work_mode.split()[-1]}")
                
                # Mettre √† jour les compteurs
                st.session_state.session_tokens += total_tokens
                st.session_state.session_requests += 1
                
                # Sauvegarder les stats
                credits_data['total_tokens'] += total_tokens
                credits_data['total_requests'] += 1
                save_credits_usage(credits_data)
                
        except Exception as e:
            error_msg = f"‚ùå Erreur: {str(e)}"
            message_placeholder.error(error_msg)
            message_data = {"role": "assistant", "content": error_msg}
    
    # Ajouter le message √† l'historique
    st.session_state.messages.append(message_data)

# Guide d'utilisation si pas de messages
if not st.session_state.messages:
    st.markdown("""
    ### üéØ Guide OpenAI 120B Advanced
    
    #### üîß **G√©n√©ration de Code** 
    - *"Cr√©e une calculatrice web avec design moderne"*
    - *"D√©veloppe une API REST pour gestion d'utilisateurs"*
    - *"G√©n√®re une app React de todo-list avec localStorage"*
    - *"Cr√©e un jeu Snake en JavaScript avec Canvas"*
    
    #### ‚ö° **Ex√©cution Python**  
    - *"Cr√©e un graphique des ventes par mois"*
    - *"Analyse ce dataset et montre les tendances"*
    - *"D√©veloppe un algorithme de tri et benchmarke-le"*
    - *"Simule un lancer de d√©s 1000 fois et affiche les stats"*
    
    #### üé® **Cr√©ation d'Apps**
    - *"Design une app mobile de fitness avec tracker"*
    - *"Cr√©e un dashboard admin avec charts et tables"*
    - *"D√©veloppe un portfolio personnel responsive"*
    - *"G√©n√®re un e-commerce avec panier et paiement"*
    
    #### üí¨ **Chat Standard**
    - Questions g√©n√©rales et conseils
    - Debugging et optimisation de code
    - Brainstorming et innovation
    - Explications techniques d√©taill√©es
    
    ### üöÄ **Fonctionnalit√©s Avanc√©es:**
    - ‚úÖ **G√©n√©ration compl√®te** d'applications fonctionnelles
    - ‚úÖ **Ex√©cution temps r√©el** de code Python  
    - ‚úÖ **T√©l√©chargement automatique** des projets cr√©√©s
    - ‚úÖ **Support multi-langages** (Python, JS, HTML, CSS, React...)
    - ‚úÖ **Visualisations** et analyses de donn√©es
    - ‚úÖ **Mobile-responsive** et optimis√© tous √©crans
    
    **üéØ Commencez par s√©lectionner un mode dans la sidebar et posez votre question !**
    """)

# Footer avanc√©
st.markdown("---")
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.markdown("**üß† OpenAI 120B**")
    st.caption("Assistant IA Avanc√©")

with col2:
    st.markdown("**üíª D√©veloppement**") 
    st.caption("Apps compl√®tes")

with col3:
    st.markdown("**‚ö° Ex√©cution**")
    st.caption("Code temps r√©el")

with col4:
    st.markdown("**üìä Analytics**")
    st.caption("Stats d√©taill√©es")

st.markdown(
    "<div style='text-align: center; color: #666; font-size: 0.8rem; margin-top: 1rem;'>"
    f"üí° Version 3.0 Advanced | {credits_data['total_tokens']:,} tokens utilis√©s | "
    f"{credits_data.get('projects_created', 0)} projets cr√©√©s"
    "</div>", 
    unsafe_allow_html=True
)